-- How many customers are there in the database?
SELECT COUNT(*) FROM customers;

-- What is the total revenue generated by product type?
SELECT products.product_type, SUM(sales.total_price) as total_revenue
FROM sales
JOIN products ON sales.product_id = products.product_ID
GROUP BY products.product_type;

--How many products were sold in a particular time period?
SELECT SUM(quantity) as total_quantity
FROM sales
JOIN orders ON sales.order_id = orders.order_id
WHERE orders.order_date BETWEEN '2021-01-01' AND '2021-04-30';

--What is the average price per unit for a specific product type?
SELECT product_type, AVG(price) as avg_price_per_unit
FROM products
WHERE product_type = 'Shirt'
GROUP BY product_type;

SELECT product_type, AVG(price) as avg_price_per_unit
FROM products
WHERE product_type = 'Jacket'
GROUP BY product_type;

SELECT product_type, AVG(price) as avg_price_per_unit
FROM products
WHERE product_type = 'Trousers'
GROUP BY product_type;

--How many orders have been made by each customer?
SELECT customers.customer_name, COUNT(orders.order_id) as num_orders
FROM customers
LEFT JOIN orders ON customers.customer_id = orders.customer_id
GROUP BY customers.customer_name;

--What is the total revenue generated by each state
SELECT customers.state, SUM(sales.total_price) as total_revenue
FROM customers
JOIN orders ON customers.customer_id = orders.customer_id
JOIN sales ON orders.order_id = sales.order_id
GROUP BY customers.state;

--What is the total revenue generated by each state
SELECT customers.city, SUM(sales.total_price) as total_revenue
FROM customers
JOIN orders ON customers.customer_id = orders.customer_id
JOIN sales ON orders.order_id = sales.order_id
GROUP BY customers.city;

----Inferential Statistics

--Calculate the total quantity sold for each product and size combination
SELECT 
    p.product_type,
    p.product_name,
    p.size,
    SUM(s.quantity) AS total_quantity_sold
FROM 
    products p
    JOIN sales s ON p.product_id = s.product_id
GROUP BY 
    p.product_type,
    p.product_name,
    p.size
ORDER BY 
    total_quantity_sold DESC;

-- Join the new table with the customer table to identify demographic information for each customer and calculate the total quantity sold:

SELECT 
    p.product_type,
    p.product_name,
    p.size,
    c.gender,
    c.age,
    c.city,
    c.state,
    c.country,
    SUM(s.quantity) AS total_quantity_sold
FROM 
    products p
    JOIN sales s ON p.product_id = s.product_id
    JOIN orders o ON s.order_id = o.order_id
    JOIN customers c ON o.customer_id = c.customer_id
GROUP BY 
    p.product_type,
    p.product_name,
    p.size,
    c.gender,
    c.age,
    c.city,
    c.state,
    c.country
ORDER BY 
    total_quantity_sold DESC;
	
--Determine which product types and sizes are most profitable, taking into account both sales volume and profit margins. 

SELECT 
    p.product_type,
    p.size,
    SUM(s.total_price) AS total_revenue,
    SUM(s.total_price - (s.quantity * p.price)) AS total_profit
FROM 
    products p
    JOIN sales s ON p.product_id = s.product_id
GROUP BY 
    p.product_type,
    p.size
ORDER BY 
    total_profit DESC;

--Calculate total profit of sales
SELECT 
    SUM(s.total_price) AS total_revenue,
    SUM(s.quantity * p.price) AS total_cost,
    SUM(s.total_price - s.quantity * p.price) AS total_profit
FROM 
    products p
    JOIN sales s ON p.product_id = s.product_id;


--Average Order Value (AOV) 
SELECT AVG(total_price) as AOV
FROM sales

--Customer Lifetime Value (CLV)
SELECT 
    c.customer_id,
    c.customer_name,
    DATE_PART('day', NOW() - MIN(o.order_date))/30 AS customer_age_in_months,
    SUM(s.total_price) AS total_spent,
    COUNT(DISTINCT o.order_id) AS total_orders,
    SUM(s.total_price) / COUNT(DISTINCT o.order_id) AS average_order_value,
    SUM(s.total_price) / DATE_PART('day', NOW() - MIN(o.order_date)) AS customer_lifetime_value
FROM 
    customers c
    JOIN orders o ON c.customer_id = o.customer_id
    JOIN sales s ON o.order_id = s.order_id
GROUP BY 
    c.customer_id,
    c.customer_name

--Churn Rate 
SELECT 
    COUNT(DISTINCT o.customer_id) AS total_customers,
    COUNT(DISTINCT CASE WHEN o.order_date < '2022-01-01' AND o.delivery_date < '2022-01-01' THEN o.customer_id END) AS churned_customers,
    COUNT(DISTINCT CASE WHEN o.order_date >= '2022-01-01' OR o.delivery_date >= '2022-01-01' THEN o.customer_id END) AS active_customers,
    COUNT(DISTINCT CASE WHEN o.order_date >= '2022-01-01' OR o.delivery_date >= '2022-01-01' THEN o.customer_id END) / CAST(COUNT(DISTINCT o.customer_id) AS FLOAT) AS churn_rate
FROM 
    orders o
WHERE 
    o.order_date < '2022-01-01' AND o.delivery_date < '2022-01-01';

-- "What are the top 10 product types sold, by total quantity, between June 1st, 2021 and September 30th, 2021?"

SELECT 
    products.product_type,
    SUM(sales.quantity) AS total_quantity
FROM 
    sales
JOIN 
    products ON sales.product_id = products.product_id
JOIN 
    orders ON sales.order_id = orders.order_id
WHERE 
    orders.delivery_date BETWEEN '2021-06-01' AND '2021-09-30'
GROUP BY 
    products.product_type
ORDER BY 
    total_quantity DESC
LIMIT 10;

--"What are the product types sold between April 1st, 2021 and June 30th, 2021, and how many units were sold for each product type, sorted in descending order of total quantity sold?"
SELECT p.product_type, SUM(s.quantity) as total_quantity
FROM sales s
JOIN products p ON s.product_id = p.product_id
JOIN orders o ON s.order_id = o.order_id
WHERE o.order_date >= '2021-04-01' AND o.order_date <= '2021-06-30'
GROUP BY p.product_type
ORDER BY total_quantity DESC;

--Order History
SELECT c.customer_id, o.order_id, o.order_date, p.product_type, s.quantity
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN sales s ON o.order_id = s.order_id
JOIN products p ON s.product_id = p.product_id
WHERE o.order_date >= '2021-01-01' AND o.order_date < '2021-09-30'
ORDER BY c.customer_id, o.order_id;

---- Forecast
SELECT 
    c.customer_id, c.gender, c.age, c.home_address, c.zip_code, c.city, c.state, c.country,
    o.order_id, o.payment, o.order_date, o.delivery_date,
    p.product_id, p.product_type, p.product_name, p.size, p.colour, p.price, p.quantity,
    s.sales_id, s.price_per_unit, s.quantity, s.total_price
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN sales s ON o.order_id = s.order_id
JOIN products p ON s.product_id = p.product_id;


--Sales First Quarter
SELECT 
    c.customer_id,
    p.product_name,
    SUM(s.total_price) as total_sales,
    AVG(p.price) as avg_product_price,
    COUNT(DISTINCT o.order_id) as num_orders,
    COUNT(DISTINCT p.product_id) as num_products
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN sales s ON o.order_id = s.order_id
JOIN products p ON s.product_id = p.product_id
WHERE o.order_date >= '202-01-01' AND o.order_date < '2021-04-01' 
GROUP BY c.customer_id, p.product_name

--Sales Second Quarter
SELECT 
    c.customer_id,
    p.product_name,
    SUM(s.total_price) as total_sales,
    AVG(p.price) as avg_product_price,
    COUNT(DISTINCT o.order_id) as num_orders,
    COUNT(DISTINCT p.product_id) as num_products
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN sales s ON o.order_id = s.order_id
JOIN products p ON s.product_id = p.product_id
WHERE o.order_date >= '2021-04-01' AND o.order_date < '2021-07-01' 
GROUP BY c.customer_id, p.product_name