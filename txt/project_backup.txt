-- What is the total number of customers in each city?

SELECT city, COUNT(DISTINCT customer_id) AS total_customers
FROM customer_table
GROUP BY city;

-- What is the total revenue generated by each product type?

SELECT product_type, SUM(total_price) AS total_revenue
FROM sales_table
INNER JOIN product_table ON sales_table.product_id = product_table.product_id
GROUP BY product_type;

-- How many orders were delivered late in each state?

SELECT state, COUNT(*) AS late_deliveries
FROM sales_table
INNER JOIN order_table ON sales_table.order_id = order_table.order_id
WHERE delivery_date > order_date
GROUP BY state;

-- What is the average age of customers who bought a particular product?

SELECT product_name, AVG(age) AS average_age
FROM customer_table
INNER JOIN order_table ON customer_table.customer_id = order_table.customer_id
INNER JOIN sales_table ON order_table.order_id = sales_table.order_id
INNER JOIN product_table ON sales_table.product_id = product_table.product_id
WHERE product_name = 'product_name_here'
GROUP BY product_name;

-- What is the total revenue generated by each gender?

SELECT gender, SUM(total_price) AS total_revenue
FROM sales_table
INNER JOIN customer_table ON sales_table.customer_id = customer_table.customer_id
GROUP BY gender;

-- Which products were sold the most in terms of quantity and revenue?

SELECT product_name, SUM(quantity) AS total_quantity_sold, SUM(total_price) AS total_revenue
FROM sales_table
INNER JOIN product_table ON sales_table.product_id = product_table.product_id
GROUP BY product_name
ORDER BY total_quantity_sold DESC, total_revenue DESC;

-- What is the average payment amount per order for each customer?

SELECT customer_name, AVG(payment) AS avg_payment_amount
FROM order_table
INNER JOIN customer_table ON order_table.customer_id = customer_table.customer_id
GROUP BY customer_name;

-- Which customers have made at least 3 orders and have not received any late deliveries?

SELECT customer_name, COUNT(DISTINCT order_table.order_id) AS total_orders
FROM customer_table
INNER JOIN order_table ON customer_table.customer_id = order_table.customer_id
INNER JOIN sales_table ON order_table.order_id = sales_table.order_id
WHERE delivery_date <= order_date
GROUP BY customer_name
HAVING total_orders >= 3;

What is the total revenue generated by each state and product type?

SELECT state, product_type, SUM(total_price) AS total_revenue
FROM sales_table
INNER JOIN order_table ON sales_table.order_id = order_table.order_id
INNER JOIN customer_table ON order_table.customer_id = customer_table.customer_id
INNER JOIN product_table ON sales_table.product_id = product_table.product_id
GROUP BY state, product_type;

-- What is the total revenue generated by each customer in a specific city and product type?

SELECT customer_name, SUM(total_price) AS total_revenue
FROM sales_table
INNER JOIN order_table ON sales_table.order_id = order_table.order_id
INNER JOIN customer_table ON order_table.customer_id = customer_table.customer_id
INNER JOIN product_table ON sales_table.product_id = product_table.product_id
WHERE city = 'city_name_here' AND product_type = 'product_type_here'
GROUP BY customer_name;

Which customers have placed at least one order in each city they have a home address in?

SELECT customer_id, customer_name
FROM (
  SELECT customer_id, city, COUNT(DISTINCT home_address) AS num_addresses
  FROM customer_table
  GROUP BY customer_id, city
) AS customer_cities
WHERE num_addresses = (
  SELECT COUNT(DISTINCT home_address)
  FROM customer_table
  WHERE customer_id = customer_cities.customer_id
)
GROUP BY customer_id, customer_name;

-- What is the total quantity and revenue of products sold in each state during a specific time period?

SELECT state, SUM(quantity) AS total_quantity_sold, SUM(total_price) AS total_revenue
FROM sales_table
INNER JOIN order_table ON sales_table.order_id = order_table.order_id
INNER JOIN customer_table ON order_table.customer_id = customer_table.customer_id
INNER JOIN product_table ON sales_table.product_id = product_table.product_id
WHERE order_date BETWEEN 'start_date_here' AND 'end_date_here'
GROUP BY state;

-- What is the average age of male and female customers who have purchased a particular product type?

SELECT gender, AVG(age) AS avg_age
FROM customer_table
INNER JOIN order_table ON customer_table.customer_id = order_table.customer_id
INNER JOIN sales_table ON order_table.order_id = sales_table.order_id
INNER JOIN product_table ON sales_table.product_id = product_table.product_id
WHERE product_type = 'product_type_here'
GROUP BY gender;

-- Which products have been purchased by at least 10 customers and have generated total revenue of more than $1000?

SELECT product_name, COUNT(DISTINCT sales_table.customer_id) AS num_customers, SUM(total_price) AS total_revenue
FROM sales_table
INNER JOIN product_table ON sales_table.product_id = product_table.product_id
GROUP BY product_name
HAVING num_customers >= 10 AND total_revenue > 1000;

-- What is the total revenue generated by each customer in a specific country and product type?

SELECT customer_name, SUM(total_price) AS total_revenue
FROM sales_table
INNER JOIN order_table ON sales_table.order_id = order_table.order_id
INNER JOIN customer_table ON order_table.customer_id = customer_table.customer_id
INNER JOIN product_table ON sales_table.product_id = product_table.product_id
WHERE country = 'country_name_here' AND product_type = 'product_type_here'
GROUP BY customer_name;

-- What is the average age of customers who have made at least one purchase?

SELECT AVG(age) AS avg_age
FROM customer_table
WHERE customer_id IN (SELECT DISTINCT customer_id FROM order_table);

-- Which products have been sold at least once but never returned?

SELECT product_name
FROM product_table
WHERE product_id IN (
  SELECT product_id
  FROM sales_table
  EXCEPT
  SELECT product_id
  FROM sales_table
  WHERE order_id IN (
    SELECT order_id
    FROM order_table
    WHERE delivery_date > order_date
  )
);

-- What is the total revenue generated by each product in each size and color?

SELECT product_name, size, colour, SUM(total_price) AS total_revenue
FROM sales_table
INNER JOIN product_table ON sales_table.product_id = product_table.product_id
GROUP BY product_name, size, colour;

-- Which customers have made at least one purchase of a product with a price greater than $500?

SELECT DISTINCT customer_name
FROM customer_table
INNER JOIN order_table ON customer_table.customer_id = order_table.customer_id
INNER JOIN sales_table ON order_table.order_id = sales_table.order_id
INNER JOIN product_table ON sales_table.product_id = product_table.product_id
WHERE price > 500;

--What is the total revenue generated by each product type and customer gender during a specific time period?

SELECT product_type, gender, SUM(total_price) AS total_revenue
FROM sales_table
INNER JOIN order_table ON sales_table.order_id = order_table.order_id
INNER JOIN customer_table ON order_table.customer_id = customer_table.customer_id
INNER JOIN product_table ON sales_table.product_id = product_table.product_id
WHERE order_date BETWEEN 'start_date_here' AND 'end_date_here'
GROUP BY product_type, gender;

-- Predict the total revenue for the next month by product type.

SELECT product_type, SUM(total_price) AS total_revenue
FROM sales_table
INNER JOIN order_table ON sales_table.order_id = order_table.order_id
INNER JOIN product_table ON sales_table.product_id = product_table.product_id
WHERE order_date BETWEEN DATEADD(month, -1, GETDATE()) AND GETDATE()
GROUP BY product_type;

-- Predict the customer with the highest total revenue in the next year.

SELECT customer_name, SUM(total_price) AS total_revenue
FROM sales_table
INNER JOIN order_table ON sales_table.order_id = order_table.order_id
INNER JOIN customer_table ON order_table.customer_id = customer_table.customer_id
WHERE order_date BETWEEN GETDATE() AND DATEADD(year, 1, GETDATE())
GROUP BY customer_name
ORDER BY total_revenue DESC
LIMIT 1;

-- Predict the top selling product types in the next quarter

SELECT product_type, SUM(quantity) AS total_quantity_sold
FROM sales_table
INNER JOIN product_table ON sales_table.product_id = product_table.product_id
WHERE order_date BETWEEN GETDATE() AND DATEADD(quarter, 1, GETDATE())
GROUP BY product_type
ORDER BY total_quantity_sold DESC
LIMIT 5;

-- Predict the gender distribution of customers who will make a purchase of a certain product type in the next month.

SELECT gender, COUNT(DISTINCT customer_table.customer_id) AS num_customers
FROM sales_table
INNER JOIN order_table ON sales_table.order_id = order_table.order_id
INNER JOIN customer_table ON order_table.customer_id = customer_table.customer_id
INNER JOIN product_table ON sales_table.product_id = product_table.product_id
WHERE product_type = 'product_type_here' AND order_date BETWEEN GETDATE() AND DATEADD(month, 1, GETDATE())
GROUP BY gender;

-- Predict the average revenue per customer for each state in the next year.

SELECT state, AVG(total_price) AS avg_revenue_per_customer
FROM sales_table
INNER JOIN order_table ON sales_table.order_id = order_table.order_id
INNER JOIN customer_table ON order_table.customer_id = customer_table.customer_id
WHERE order_date BETWEEN GETDATE() AND DATEADD(year, 1, GETDATE())
GROUP BY state;

-- Predict the expected revenue for a new product based on the average revenue per product type.

SELECT product_type, AVG(total_price) AS avg_revenue_per_product_type
FROM sales_table
INNER JOIN product_table ON sales_table.product_id = product_table.product_id
GROUP BY product_type;

-- Suppose the new product belongs to the 'product_type_here' category and its price is $100.
SELECT 100 * AVG(total_price) / AVG(price) AS expected_revenue
FROM sales_table
INNER JOIN product_table ON sales_table.product_id = product_table.product_id
WHERE product_type = 'product_type_here';

-- Predict the expected revenue for the next month based on the revenue trend of the previous three months.

WITH revenue_trend AS (
  SELECT
    DATEADD(month, DATEDIFF(month, 0, order_date), 0) AS month_start,
    SUM(total_price) AS monthly_revenue
  FROM sales_table
  INNER JOIN order_table ON sales_table.order_id = order_table.order_id
  WHERE order_date BETWEEN DATEADD(month, -3, GETDATE()) AND GETDATE()
  GROUP BY DATEADD(month, DATEDIFF(month, 0, order_date), 0)
)
SELECT AVG(monthly_revenue) * 30 AS expected_revenue
FROM revenue_trend;

-- Predict the customer lifetime value for each customer based on their average revenue per purchase and purchase frequency.

WITH customer_ltv AS (
  SELECT
    customer_id,
    AVG(total_price) AS avg_revenue_per_purchase,
    COUNT(DISTINCT order_id) AS num_purchases,
    DATEDIFF(month, MIN(order_date), MAX(order_date)) AS lifetime_in_months
  FROM sales_table
  INNER JOIN order_table ON sales_table.order_id = order_table.order_id
  GROUP BY customer_id
)
SELECT customer_name, avg_revenue_per_purchase * num_purchases * lifetime_in_months AS customer_ltv
FROM customer_ltv
INNER JOIN customer_table ON customer_ltv.customer_id = customer_table.customer_id;

-- Predict the product types that are most likely to be purchased together based on their co-occurrence frequency.

WITH product_cooccurrence AS (
  SELECT
    p1.product_type AS product_type1,
    p2.product_type AS product_type2,
    COUNT(DISTINCT s1.order_id) AS num_orders
  FROM product_table p1
  INNER JOIN sales_table s1 ON p1.product_id = s1.product_id
  INNER JOIN order_table o1 ON s1.order_id = o1.order_id
  INNER JOIN product_table p2 ON s1.product_id != p1.product_id AND s1.product_id = p2.product_id
  INNER JOIN sales_table s2 ON p2.product_id = s2.product_id AND s2.order_id = o1.order_id
  GROUP BY p1.product_type, p2.product_type
)
SELECT product_type1, product_type2, num_orders
FROM product_cooccurrence
WHERE product_type1 < product_type2
ORDER BY num_orders DESC
LIMIT 10;

-- Predict the customer churn rate for each month based on the number of customers who have not made a purchase in the past three months.

WITH customer_churn AS (
  SELECT
    DATEADD(month, DATEDIFF(month, 0, order_date), 0) AS month_start,
    COUNT(DISTINCT customer_table.customer_id) AS num_churned_customers
  FROM customer_table
  LEFT JOIN order_table ON customer_table.customer_id = order



